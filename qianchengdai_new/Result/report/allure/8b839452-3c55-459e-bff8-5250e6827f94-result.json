{"name": "test_03_success[data0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "data = {'Caseid': 6, 'amount': '100', 'bid_name': '第一个项目', 'expect': '投标成功！', ...}\ninit_bid = (<Pages.bid.BidPage object at 0x00000000047E29E8>, <Pages.personal.PersonalPage object at 0x00000000047E2C18>)\n\n    @pytest.mark.success\n    @pytest.mark.parametrize('data',bid_data.success_data)\n    def test_03_success(data,init_bid):\n        logger.info('正在执行{}模块第{}条测试用例,用例名字是:{},项目名字是：{},投资金额是:{},期望结果:{}'.format(data['module'],\n        data['Caseid'], data['title'], data['bid_name'], data['amount'], data['expect']))\n        bid = init_bid[0]\n        personal = init_bid[1]\n        # 获取投资前的金额\n        begin_money = int(bid.get_begin_money() * 100)\n        # print(begin_money)\n        # 投资\n        bid.input_money(data['amount'])\n        # 点击投资按钮\n        bid.get_button()\n        # 获取提示\n>       prompt = bid.get_prompt()\n\nCases\\test_bid.py:74: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPages\\bid.py:29: in get_prompt\n    ele=self.wait_ele(bid_locator.bid_prompt,30)\nPages\\basepage.py:25: in wait_ele\n    raise e\nPages\\basepage.py:20: in wait_ele\n    ele = Wait.until(ec.presence_of_element_located((locator)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"c51b3fbfa6b5404c6124bf5db19e9126\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x00000000047DE2B0>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "attachments": [{"name": "log", "source": "ec4e652b-9edc-47d0-85e1-71ac04b3f8c9-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'Caseid': 6, 'module': '投标', 'title': '正常投资', 'bid_name': '第一个项目', 'amount': '100', 'expect': '投标成功！'}"}], "start": 1598346281327, "stop": 1598346312043, "uuid": "ae818583-efee-4d87-9a20-4776a6069f67", "historyId": "8f0db1a24d6f858d35036a1afc25a7e4", "fullName": "Cases.test_bid#test_03_success[data0]", "labels": [{"name": "tag", "value": "success"}, {"name": "parentSuite", "value": "Cases"}, {"name": "suite", "value": "test_bid"}, {"name": "host", "value": "Danny"}, {"name": "thread", "value": "241476-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Cases.test_bid"}]}